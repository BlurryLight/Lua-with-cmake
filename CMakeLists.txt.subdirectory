file(GLOB LUA_LIB_SRCS "src/*.c")
list(REMOVE_ITEM LUA_LIB_SRCS 
    ${temp_dir}/src/lua.c 
    ${temp_dir}/src/luac.c 
)
# message(${LUA_LIB_SRCS})


if(LUA_BUILD_AS_CXX)
	set_source_files_properties(${LUA_LIB_SRCS} "src/lua.c" "src/luac.c" PROPERTIES LANGUAGE CXX )
endif()

add_library(lua_objects OBJECT ${LUA_LIB_SRCS})
set_property(TARGET lua_objects PROPERTY POSITION_INDEPENDENT_CODE 1)

add_library(lua_static STATIC $<TARGET_OBJECTS:lua_objects>)
add_library(lua_dynamic SHARED $<TARGET_OBJECTS:lua_objects>)

set(name lua${LUA_VERSION_MAJOR}${LUA_VERSION_MINOR})
set_target_properties(lua_static PROPERTIES OUTPUT_NAME ${name}s)
target_include_directories(lua_static PUBLIC "include")

set_target_properties(lua_dynamic PROPERTIES OUTPUT_NAME ${name})
target_include_directories(lua_dynamic PUBLIC "include")
target_compile_definitions ( lua_dynamic PRIVATE LUA_BUILD_AS_DLL )
if(MSVC)
    target_compile_definitions ( lua_dynamic PRIVATE _CRT_SECURE_NO_WARNINGS )
endif(MSVC)
if(UNIX)
	set(LUA_DEFINITIONS)
    
    if(NOT EMSCRIPTEN)
        find_library(LIBM m)
        #TODO: Redo this with find_package
        if(NOT LIBM)
            message(FATAL_ERROR "libm not found and is required by lua")
        endif()
        target_link_libraries(lua_static INTERFACE ${LIBM})
        target_link_libraries(lua_dynamic INTERFACE ${LIBM})

        list(APPEND LUA_DEFINITIONS LUA_USE_POSIX)
        if(LUA_SUPPORT_DL)
            target_compile_definitions(lua_static PRIVATE "LUA_USE_DLOPEN")
            target_link_libraries(lua_static INTERFACE dl)
            target_compile_definitions(lua_dynamic PRIVATE "LUA_USE_DLOPEN")
            target_link_libraries(lua_dynamic INTERFACE dl)
        endif()
    endif()

	target_compile_definitions(lua_static 
		PUBLIC ${LUA_DEFINITIONS}
	)
	target_compile_options(lua_static
		PRIVATE "-Wall" "-Wextra"
	)
	target_compile_definitions(lua_dynamic 
		PUBLIC ${LUA_DEFINITIONS}
	)
	target_compile_options(lua_dynamic
		PRIVATE "-Wall" "-Wextra"
	)
endif()

if(LUA_BUILD_BINARY)
    include(CheckIncludeFile)
    CHECK_INCLUDE_FILE("readline/readline.h" HAVE_READLINE_READLINE_H)


    add_executable(lua "src/lua.c")
    target_link_libraries(lua PUBLIC lua_static)
    set_target_properties(lua PROPERTIES 
        RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}
    )
    if (HAVE_READLINE_READLINE_H)
        target_compile_definitions(lua PUBLIC "LUA_USE_READLINE")
        target_link_libraries(lua PUBLIC readline)
    endif()
endif()
# https://stackoverflow.com/questions/33952101/error-while-building-luac-executable-in-rhel6-6
# luac must staticlly link liblua.c
if(LUA_BUILD_COMPILER)
    add_executable(luac "src/luac.c")
    target_link_libraries(luac PUBLIC lua_static)
    set_target_properties(luac PROPERTIES 
        RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}
    )
endif()